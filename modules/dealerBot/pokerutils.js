// Generated by CoffeeScript 1.6.2
(function() {
  var Field, HAND_CATEGORY, HandCalculator, Player, PokerUtil, STATUS, SUITS, checkWinningPercentage, getAllCards, getExistCards, judgeWinner, _;

  _ = require('underscore');

  Player = (function() {
    function Player(name, hand, field) {
      var num1, num2, tmp;
      this.name = name;
      this.hand = hand;
      this.field = field;
      this.percent = 0;
      this.handTypeCall = '';
      num1 = Number(this.hand[0].match(/[0-9]+/g));
      num2 = Number(this.hand[1].match(/[0-9]+/g));
      if ((num1 < num2 || num2 === 1) && num1 !== 1) {
        tmp = this.hand[0];
        this.hand[0] = this.hand[1];
        this.hand[1] = tmp;
      }
    }

    Player.prototype.getName = function() {
      return this.name;
    };

    Player.prototype.getHand = function() {
      return this.hand;
    };

    Player.prototype.getField = function() {
      return this.field;
    };

    Player.prototype.getHandTypeCall = function() {
      return this.handTypeCall;
    };

    Player.prototype.setHandTypeCall = function(handTypeCall) {
      return this.handTypeCall = handTypeCall;
    };

    Player.prototype.setPercent = function(percent) {
      return this.percent = percent;
    };

    Player.prototype.checkHand = function() {
      var calculator, cards, i, item, status, _i, _j, _len, _len1, _ref, _ref1;
      status = this.field.getStatus();
      cards = [];
      _ref = this.hand;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        cards.push(i);
      }
      if (this.field.getFlop()) {
        _ref1 = this.field.getFlop();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          cards.push(item);
        }
      }
      if (this.field.getTurn()) {
        cards.push(this.field.getTurn());
      }
      if (this.field.getRiver()) {
        cards.push(this.field.getRiver());
      }
      if (cards.length === 7) {
        calculator = new HandCalculator(cards);
        return calculator.calculateHand(function(err, handType, hands) {
          var key, _k, _len2;
          for (_k = 0, _len2 = hands.length; _k < _len2; _k++) {
            key = hands[_k];
            console.log('key = ' + key);
          }
          return {
            error: err,
            handType: handType,
            hands: hands
          };
        });
      }
    };

    return Player;

  })();

  HandCalculator = (function() {
    var checkFlush, checkStraight, checkStraightFlush, checkSuitContainsNumber, getKicker;

    function HandCalculator(cards) {
      this.cards = cards;
    }

    HandCalculator.prototype.calculateHand = function(cb) {
      var card, card_numbers, i, isStraightFlush, is_Flush, is_Straight, kicker, maxPair, number, numbers, pairs, suits, threeKind, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      if (this.cards.length !== 7) {
        return cb("INVALID CARD LENGTH", null, null);
      }
      card_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
      card_numbers.push(1);
      suits = {};
      _ref = [[], [], [], []], suits.spades = _ref[0], suits.hearts = _ref[1], suits.diamonds = _ref[2], suits.clubs = _ref[3];
      numbers = {};
      for (_i = 0, _len = card_numbers.length; _i < _len; _i++) {
        i = card_numbers[_i];
        numbers[i] = [];
      }
      _ref1 = this.cards;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        card = _ref1[_j];
        number = card.match(/[0-9]+/g);
        switch (card.charAt(0)) {
          case "♠":
          case "s":
            suits.spades.push(number);
            break;
          case "♥":
          case "h":
            suits.hearts.push(number);
            break;
          case "♦":
          case "d":
            suits.diamonds.push(number);
            break;
          case "♣":
          case "c":
            suits.clubs.push(number);
        }
        numbers[number].push(card.charAt(0));
      }
      suits.spades = _.flatten(suits.spades);
      suits.hearts = _.flatten(suits.hearts);
      suits.diamonds = _.flatten(suits.diamonds);
      suits.clubs = _.flatten(suits.clubs);
      is_Flush = checkFlush(suits);
      if (is_Flush.suit !== SUITS.NONE) {
        isStraightFlush = checkStraightFlush(is_Flush.suit, suits);
        if (isStraightFlush !== null) {
          return cb(null, HAND_CATEGORY.StraightFlush, {
            suit: is_Flush.suit,
            highcard: isStraightFlush.highcard
          });
        }
      }
      for (_k = 0, _len2 = card_numbers.length; _k < _len2; _k++) {
        i = card_numbers[_k];
        if (numbers[i].length === 4) {
          return cb(null, HAND_CATEGORY.FourOfAKind, {
            kicker: '' + i
          });
        }
      }
      _ref2 = [null, [], null], threeKind = _ref2[0], pairs = _ref2[1], maxPair = _ref2[2];
      _ref3 = card_numbers.reverse();
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        i = _ref3[_l];
        if (numbers[i].length === 3 && !threeKind) {
          threeKind = i;
        } else if (numbers[i].length >= 2) {
          if (pairs.length < 2) {
            pairs.push(i);
          }
          if (!maxPair) {
            maxPair = i;
          }
        }
      }
      if (threeKind && maxPair) {
        return cb(null, HAND_CATEGORY.FullHouse, {
          threeKind: threeKind,
          pair: maxPair
        });
      }
      if (is_Flush.suit !== SUITS.NONE) {
        return cb(null, HAND_CATEGORY.Flush, is_Flush);
      }
      is_Straight = checkStraight(numbers);
      if (is_Straight !== null) {
        return cb(null, HAND_CATEGORY.Straight, is_Straight);
      }
      if (threeKind) {
        kicker = getKicker(numbers, 2, threeKind);
        return cb(null, HAND_CATEGORY.ThreeOfAKind, {
          threeKind: threeKind,
          kicker: kicker
        });
      }
      if (pairs.length > 1) {
        kicker = getKicker(numbers, 1, pairs);
        return cb(null, HAND_CATEGORY.TwoPair, {
          pairs: pairs,
          kicker: kicker
        });
      }
      if (pairs.length === 1) {
        kicker = getKicker(numbers, 3, pairs);
        return cb(null, HAND_CATEGORY.OnePair, {
          pairs: maxPair,
          kicker: kicker
        });
      }
      kicker = getKicker(numbers, 5, null);
      return cb(null, HAND_CATEGORY.HightCard, {
        highcard: kicker
      });
    };

    getKicker = function(numbers, requiredKicker, without) {
      var card_numbers, difference, i, j, kicker, _i, _j, _len, _len1, _ref, _ref1;
      card_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
      card_numbers.push(1);
      difference = _.difference(card_numbers, without);
      kicker = [];
      _ref = difference.reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _ref1 = numbers[i];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          j = _ref1[_j];
          kicker.push("" + j + i);
          if (kicker.length === requiredKicker) {
            return kicker;
          }
        }
      }
    };

    checkFlush = function(suits) {
      var card_numbers, hands, num, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      card_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];
      card_numbers.push(1);
      card_numbers = card_numbers.reverse();
      hands = [];
      if (suits.spades.length >= 5) {
        for (_i = 0, _len = card_numbers.length; _i < _len; _i++) {
          num = card_numbers[_i];
          if (_.contains(suits.spades, String(num))) {
            hands.push(num);
          }
          if (hands.length === 5) {
            return {
              suit: SUITS.SPADES,
              hands: hands
            };
          }
        }
      } else if (suits.hearts.length >= 5) {
        for (_j = 0, _len1 = card_numbers.length; _j < _len1; _j++) {
          num = card_numbers[_j];
          if (_.contains(suits.hearts, String(num))) {
            hands.push(num);
          }
          if (hands.length === 5) {
            return {
              suit: SUITS.HEARTS,
              hands: hands
            };
          }
        }
      } else if (suits.diamonds.length >= 5) {
        for (_k = 0, _len2 = card_numbers.length; _k < _len2; _k++) {
          num = card_numbers[_k];
          if (_.contains(suits.diamonds, String(num))) {
            hands.push(num);
          }
          if (hands.length === 5) {
            return {
              suit: SUITS.DIAMONDS,
              hands: hands
            };
          }
        }
      } else if (suits.clubs.length >= 5) {
        for (_l = 0, _len3 = card_numbers.length; _l < _len3; _l++) {
          num = card_numbers[_l];
          if (_.contains(suits.clubs, String(num))) {
            hands.push(num);
          }
          if (hands.length === 5) {
            return {
              suit: SUITS.CLUBS,
              hands: hands
            };
          }
        }
      }
      return {
        suit: SUITS.NONE
      };
    };

    checkStraightFlush = function(SUIT, suits) {
      if (SUIT === SUITS.SPADES) {
        return checkSuitContainsNumber(suits.spades);
      }
      if (SUIT === SUITS.HEARTS) {
        return checkSuitContainsNumber(suits.hearts);
      }
      if (SUIT === SUITS.DIAMONDS) {
        return checkSuitContainsNumber(suits.diamonds);
      }
      if (SUIT === SUITS.CLUBS) {
        return checkSuitContainsNumber(suits.clubs);
      }
      return null;
    };

    checkSuitContainsNumber = function(suits) {
      var i, _i;
      if (_.contains(suits, String(1)) && _.contains(suits, String(10)) && _.contains(suits, String(11)) && _.contains(suits, String(12)) && _.contains(suits, String(13))) {
        return {
          highcard: 1
        };
      }
      for (i = _i = 9; _i >= 1; i = --_i) {
        if (_.contains(suits, String(i)) && _.contains(suits, String(i + 1)) && _.contains(suits, String(i + 2)) && _.contains(suits, String(i + 3)) && _.contains(suits, String(i + 4))) {
          return {
            highcard: i + 4
          };
        }
      }
      return null;
    };

    checkStraight = function(numbers) {
      var i, _i;
      if (numbers[10].length > 0 && numbers[11].length > 0 && numbers[12].length > 0 && numbers[13].length > 0 && numbers[1].length > 0) {
        return {
          highcard: 1
        };
      }
      for (i = _i = 9; _i >= 1; i = --_i) {
        if (numbers[i].length > 0 && numbers[i + 1].length > 0 && numbers[i + 2].length > 0 && numbers[i + 3].length > 0 && numbers[i + 4].length > 0) {
          return {
            highcard: i + 4
          };
        }
      }
      return null;
    };

    return HandCalculator;

  })();

  SUITS = {
    SPADES: "スペード",
    HEARTS: "ハート",
    DIAMONDS: "ダイヤ",
    CLUBS: "クラブ",
    NONE: "なし"
  };

  Field = (function() {
    function Field() {
      this.flop = [];
      this.turn = null;
      this.river = null;
    }

    Field.prototype.setFlop = function(cards) {
      return this.flop = cards;
    };

    Field.prototype.setTurn = function(card) {
      return this.turn = card;
    };

    Field.prototype.setRiver = function(card) {
      return this.river = card;
    };

    Field.prototype.getStatus = function() {
      if (this.flop.length === 0) {
        return STATUS.PRE_FLOP;
      } else if (this.turn === null) {
        return STATUS.FLOP;
      } else if (this.river === null) {
        return STATUS.TURN;
      } else {
        return STATUS.RIVER;
      }
    };

    Field.prototype.getFlop = function() {
      return this.flop;
    };

    Field.prototype.getTurn = function() {
      return this.turn;
    };

    Field.prototype.getRiver = function() {
      return this.river;
    };

    return Field;

  })();

  STATUS = {
    PRE_FLOP: "プリフロップ",
    FLOP: "フロップ",
    TURN: "ターン",
    RIVER: "リバー"
  };

  HAND_CATEGORY = {
    HightCard: {
      rank: 0,
      call: "ハイカード"
    },
    OnePair: {
      rank: 1,
      call: "ワンペア"
    },
    TwoPair: {
      rank: 2,
      call: "ツーペア"
    },
    ThreeOfAKind: {
      rank: 3,
      call: "スリーカード"
    },
    Straight: {
      rank: 4,
      call: "ストレート"
    },
    Flush: {
      rank: 5,
      call: "フラッシュ"
    },
    FullHouse: {
      rank: 6,
      call: "フルハウス"
    },
    FourOfAKind: {
      rank: 7,
      call: "フォーカード"
    },
    StraightFlush: {
      rank: 8,
      call: "ストレートフラッシュ"
    }
  };

  judgeWinner = function(player1, player2) {
    var h1, h2, hand1, hand2, i, num1, num2, _i, _j, _k, _l;
    hand1 = player1.checkHand();
    hand2 = player2.checkHand();
    player1.setHandTypeCall(hand1.handType.call);
    player2.setHandTypeCall(hand2.handType.call);
    if (hand1.handType.rank > hand2.handType.rank) {
      return player1;
    } else if (hand1.handType.rank < hand2.handType.rank) {
      return player2;
    } else {
      if (hand1.handType === HAND_CATEGORY.StraightFlush) {
        if (hand1.hands.highcard === 1 && hand2.hands.highcard !== 1) {
          return player1;
        } else if (hand2.hands.highcard === 1 && hand1.hands.highcard !== 1) {
          return player2;
        } else if (hand1.hands.highcard === 1 && hand2.hands.highcard === 1) {
          return null;
        } else if (hand1.hands.highcard > hand2.hands.highcard) {
          return player1;
        } else if (hand1.hands.highcard < hand2.hands.highcard) {
          return player2;
        } else {
          return null;
        }
      } else if (hand1.handType === HAND_CATEGORY.FourOfAKind) {
        num1 = 1 * hand1.hands.kicker.match(/[0-9]+/g)[0];
        num2 = 1 * hand2.hands.kicker.match(/[0-9]+/g)[0];
        if (num1 === "1") {
          num1 = 14;
        }
        if (num2 === "1") {
          num2 = 14;
        }
        if (num1 > num2) {
          return player1;
        } else if (num1 < num2) {
          return player2;
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.FullHouse) {
        if (hand1.hands.threeKind === 1) {
          hand1.hands.threeKind = 14;
        }
        if (hand2.hands.threeKind === 1) {
          hand2.hands.threeKind = 14;
        }
        if (hand1.hands.pair === 1) {
          hand1.hands.pair = 14;
        }
        if (hand2.hands.pair === 1) {
          hand2.hands.pair = 14;
        }
        if (hand1.hands.threeKind > hand2.hands.threeKind) {
          return player1;
        } else if (hand1.hands.threeKind < hand2.hands.threeKind) {
          return player2;
        }
        if (hand1.hands.pair > hand2.hands.pair) {
          return player1;
        }
        if (hand1.hands.pair < hand2.hands.pair) {
          return player2;
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.Flush) {
        for (i = _i = 0; _i <= 5; i = ++_i) {
          if (hand1.hands.hands[i] === 1 && hand2.hands.hands[i] !== 1) {
            return player1;
          }
          if (hand1.hands.hands[i] !== 1 && hand2.hands.hands[i] === 1) {
            return player2;
          }
          if (hand1.hands.hands[i] > hand2.hands.hands[i]) {
            return player1;
          }
          if (hand1.hands.hands[i] < hand2.hands.hands[i]) {
            return player2;
          }
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.Straight) {
        if (hand1.hands.highcard === 1 && hand2.hands.highcard !== 1) {
          return player1;
        }
        if (hand1.hands.highcard !== 1 && hand2.hands.highcard === 1) {
          return player2;
        }
        if (hand1.hands.highcard > hand2.hands.highcard) {
          return player1;
        }
        if (hand1.hands.highcard < hand2.hands.highcard) {
          return player2;
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.ThreeOfAKind) {
        if (hand1.hands.threeKind === 1 && hand2.hands.threeKind !== 1) {
          return player1;
        }
        if (hand1.hands.threeKind !== 1 && hand2.hands.threeKind === 1) {
          return player2;
        }
        if (hand1.hands.threeKind > hand2.hands.threeKind) {
          return player1;
        }
        if (hand1.hands.threeKind < hand2.hands.threeKind) {
          return player2;
        }
        for (i = _j = 0; _j < 2; i = ++_j) {
          h1 = hand1.hands.kicker[i];
          num1 = 1 * h1.match(/[0-9]+/g)[0];
          h2 = hand2.hands.kicker[i];
          num2 = 1 * h2.match(/[0-9]+/g)[0];
          if (num1 === 1) {
            num1 = 14;
          }
          if (num2 === 1) {
            num2 = 14;
          }
          if (num1 > num2) {
            return player1;
          } else if (num1 < num2) {
            return player2;
          }
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.TwoPair) {
        if (_.first(hand1.hands.pairs) === 1 && _.first(hand2.hands.pairs) !== 1) {
          return player1;
        }
        if (_.first(hand1.hands.pairs) !== 1 && _.first(hand2.hands.pairs) === 1) {
          return player2;
        }
        if (_.first(hand1.hands.pairs) > _.first(hand2.hands.pairs)) {
          return player1;
        } else if (_.first(hand1.hands.pairs) < _.first(hand2.hands.pairs)) {
          return player2;
        } else if (_.last(hand1.hands.pairs) > _.last(hand2.hands.pairs)) {
          return player1;
        } else if (_.last(hand1.hands.pairs) < _.last(hand2.hands.pairs)) {
          return player2;
        }
        num1 = 1 * hand1.hands.kicker[0].match(/[0-9]+/g)[0];
        num2 = 1 * hand2.hands.kicker[0].match(/[0-9]+/g)[0];
        if (num1 === 1) {
          num1 = 14;
        }
        if (num2 === 1) {
          num2 = 14;
        }
        if (num1 > num2) {
          return player1;
        } else if (num1 < num2) {
          return player2;
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.OnePair) {
        if (hand1.hands.pairs === 1 && hand2.hands.pairs !== 1) {
          return player1;
        }
        if (hand1.hands.pairs !== 1 && hand2.hands.pairs === 1) {
          return player2;
        }
        if (hand1.hands.pairs > hand2.hands.pairs) {
          return player1;
        } else if (hand1.hands.pairs < hand2.hands.pairs) {
          return player2;
        }
        for (i = _k = 0; _k < 3; i = ++_k) {
          h1 = hand1.hands.kicker[i];
          num1 = 1 * h1.match(/[0-9]+/g)[0];
          h2 = hand2.hands.kicker[i];
          num2 = 1 * h2.match(/[0-9]+/g)[0];
          if (num1 === 1) {
            num1 = 14;
          }
          if (num2 === 1) {
            num2 = 14;
          }
          if (num1 > num2) {
            return player1;
          } else if (num1 < num2) {
            return player2;
          }
        }
        return null;
      } else if (hand1.handType === HAND_CATEGORY.HightCard) {
        for (i = _l = 0; _l < 5; i = ++_l) {
          num1 = 1 * hand1.hands.highcard[i].match(/[0-9]+/g)[0];
          num2 = 1 * hand2.hands.highcard[i].match(/[0-9]+/g)[0];
          if (num1 === 1) {
            num1 = 14;
          }
          if (num2 === 1) {
            num2 = 14;
          }
          if (num1 > num2) {
            return player1;
          } else if (num1 < num2) {
            return player2;
          }
        }
        return null;
      }
    }
  };

  getAllCards = function() {
    var allCards, i, _i;
    allCards = [];
    for (i = _i = 1; _i <= 13; i = ++_i) {
      allCards.push("♠" + i);
      allCards.push("♥" + i);
      allCards.push("♦" + i);
      allCards.push("♣" + i);
    }
    return allCards;
  };

  getExistCards = function(invisibleCards) {
    var allCards, existCards;
    allCards = getAllCards();
    existCards = _.difference(allCards, invisibleCards);
    return existCards;
  };

  checkWinningPercentage = function(field, Players, cb) {
    var card, existCards, hand1, hand2, i, invisibleCards, j, percent, player, winner, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2;
    invisibleCards = [];
    for (_i = 0, _len = Players.length; _i < _len; _i++) {
      player = Players[_i];
      invisibleCards.push(player.getHand());
    }
    invisibleCards.push(field.getFlop());
    invisibleCards.push(field.getTurn());
    invisibleCards.push(field.getRiver());
    invisibleCards = _.flatten(invisibleCards);
    invisibleCards = _.compact(invisibleCards);
    existCards = getExistCards(invisibleCards);
    console.log(field.getStatus());
    switch (field.getStatus()) {
      case STATUS.RIVER:
        winner = judgeWinner(Players[0], Players[1]);
        if (winner === Players[0]) {
          Players[0].setPercent(100);
          Players[1].setPercent(0);
        } else if (winner === Players[1]) {
          Players[0].setPercent(0);
          Players[1].setPercent(100);
        }
        return cb(Players);
      case STATUS.TURN:
        percent = {};
        percent[0] = 0;
        percent[1] = 0;
        percent.draw = 0;
        for (_j = 0, _len1 = existCards.length; _j < _len1; _j++) {
          card = existCards[_j];
          field.setRiver(card);
          winner = judgeWinner(Players[0], Players[1]);
          if (winner === Players[0]) {
            percent[0]++;
          } else if (winner === Players[1]) {
            percent[1]++;
          }
        }
        field.setRiver(null);
        Players[0].setPercent(percent[0] / existCards.length);
        Players[1].setPercent(percent[1] / existCards.length);
        return cb(Players);
      case STATUS.FLOP:
        percent = {};
        percent[0] = 0;
        percent[1] = 0;
        percent.draw = 0;
        for (i = _k = 0, _ref = existCards.length - 1; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
          for (j = _l = _ref1 = i + 1, _ref2 = existCards.length; _ref1 <= _ref2 ? _l < _ref2 : _l > _ref2; j = _ref1 <= _ref2 ? ++_l : --_l) {
            field.setTurn(existCards[i]);
            field.setRiver(existCards[j]);
            winner = judgeWinner(Players[0], Players[1]);
            if (winner === Players[0]) {
              percent[0]++;
            } else if (winner === Players[1]) {
              percent[1]++;
            } else {
              percent.draw++;
            }
          }
        }
        field.setTurn(null);
        field.setRiver(null);
        Players[0].setPercent(100 * percent[0] / (percent[0] + percent[1] + percent.draw));
        Players[1].setPercent(100 * percent[1] / (percent[0] + percent[1] + percent.draw));
        return cb(Players);
      case STATUS.PRE_FLOP:
        hand1 = {};
        hand1[0] = {};
        hand1[1] = {};
        hand1[0].suit = Players[0].getHand()[0].charAt(0);
        hand1[0].number = Number(Players[0].getHand()[0].match(/[0-9]+/g)[0]);
        hand1[1].suit = Players[0].getHand()[1].charAt(0);
        hand1[1].number = Number(Players[0].getHand()[1].match(/[0-9]+/g)[0]);
        hand2 = {};
        hand2[0] = {};
        hand2[1] = {};
        hand2[0].suit = Players[1].getHand()[0].charAt(0);
        hand2[0].number = Number(Players[1].getHand()[0].match(/[0-9]+/g)[0]);
        hand2[1].suit = Players[1].getHand()[1].charAt(0);
        hand2[1].number = Number(Players[1].getHand()[1].match(/[0-9]+/g)[0]);
        if (hand1[0].number < 2) {
          hand1[0].number = 14;
        }
        if (hand1[1].number < 2) {
          hand1[1].number = 14;
        }
        if (hand2[0].number < 2) {
          hand2[0].number = 14;
        }
        if (hand2[1].number < 2) {
          hand2[1].number = 14;
        }
        if (hand1[0].number === hand1[1].number) {
          if (hand2[0].number === hand2[1].number) {
            if (hand1[0].number > hand2[0].number) {
              Players[0].setPercent(82);
              Players[1].setPercent(18);
            } else if (hand1[0].number > hand2[0].number) {
              Players[0].setPercent(18);
              Players[1].setPercent(82);
            } else {
              Players[0].setPercent(50);
              Players[1].setPercent(50);
            }
            return cb(Players);
          } else if (hand2[0].number > hand1[0].number) {
            if (hand2[1].number > hand1[0].number) {
              Players[0].setPercent(55);
              Players[1].setPercent(45);
            } else if (hand2[1].number < hand1[0].number) {
              Players[0].setPercent(45);
              Players[1].setPercent(55);
            } else {
              Players[0].setPercent(71);
              Players[1].setPercent(29);
            }
            return cb(Players);
          } else {
            Players[0].setPercent(89);
            Players[1].setPercent(11);
            return cb(Players);
          }
        } else if (hand2[0].number === hand2[1].number) {
          console.log(hand2);
          if (hand1[0].number > hand2[0].number) {
            if (hand1[1].number > hand2[0].number) {
              Players[1].setPercent(55);
              Players[0].setPercent(45);
            } else if (hand1[1].number < hand2[0].number) {
              Players[1].setPercent(45);
              Players[0].setPercent(55);
            } else {
              Players[1].setPercent(71);
              Players[0].setPercent(29);
            }
            return cb(Players);
          } else {
            Players[1].setPercent(89);
            Players[0].setPercent(11);
            return cb(Players);
          }
        } else {
          console.log(hand1[0].number, hand2[0].number, hand1[0].number > hand2[0].number);
          if (hand1[0].number > hand2[0].number) {
            if (hand1[1].number > hand2[1].number) {
              Players[0].setPercent(62);
              Players[1].setPercent(38);
            } else if (hand1[1].number < hand2[1].number) {
              Players[0].setPercent(52);
              Players[1].setPercent(48);
            } else {
              Players[0].setPercent(71);
              Players[1].setPercent(29);
            }
            return cb(Players);
          } else {
            if (hand1[1].number > hand2[1].number) {
              Players[0].setPercent(48);
              Players[1].setPercent(52);
            } else if (hand1[1].number < hand2[1].number) {
              Players[0].setPercent(38);
              Players[1].setPercent(62);
            } else {
              Players[0].setPercent(29);
              Players[1].setPercent(71);
            }
            return cb(Players);
          }
        }
        return cb(Players);
    }
  };

  PokerUtil = {};

  PokerUtil.Player = Player;

  PokerUtil.HandCalculator = HandCalculator;

  PokerUtil.Field = Field;

  PokerUtil.judgeWinner = judgeWinner;

  PokerUtil.checkWinningPercentage = checkWinningPercentage;

  module.exports = PokerUtil;

}).call(this);
